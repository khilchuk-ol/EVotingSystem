using System.Numerics;

namespace Shared.RsaEncryption
{
    public class HardcodedPrimesKeyGenerator : IKeyGenerator
    {
        private readonly List<BigInteger> primes = new() 
        {
            BigInteger.Parse("11928120180516583397017662488765944637491736730784742824266216989551834552763448424126620437615584705464360063633949936508877928906187935411493062091428181"),
            BigInteger.Parse("14518149916542188507123681093419124493439062099281874005694171716241976915187917124842682640887505128317098477138579671698782756842281034657359619449832167"),
            BigInteger.Parse("14703690686520485260712843706376745622334235098616116458372318487399265132381870014423267735780405101973275620997690138281321999242004785708032652909305037"),
            BigInteger.Parse("24954584806589672700700352144386653619019033353283384850566462987908956998199068377280314424305490562415894442999458389866098516163574386519857698449115323"),
            BigInteger.Parse("26310383411848548278393309871313245773510486357438305928401823163439148419993879042542198396968276050209636826076140067979775085160645802340896545133419997"),
            BigInteger.Parse("28926338763383975450346621510626540498676595262156946374055182227955617458670677436805657530353222560352738997057159092329592105246302006786343905476701763"),
            BigInteger.Parse("33017148308304853807440489318114545727779898019299080233897231954853239735689212784782471822489814874338285441650203061040558155063224459951087528614567757"),
            BigInteger.Parse("44142770875752742406619898105281877768827710515338396326154183525823950460224404095891307175808915641139699937649228250506508949747604217925111985570252539"),
            BigInteger.Parse("51894432865940579422603199560342833881031283557740417731346373324736044815747117369045377384313172590167599652474195926871280491222795918555997170311498167"),
            BigInteger.Parse("56903902759542553941933187952891641589770620622517724287407491484007852130935625733268004145201277912442549738189460108583588364617746714361879860473387409"),
            BigInteger.Parse("60931802440036040338168219437593915154853106540614439260325325065089165443585344867133627186845355512659293606285114678528774886828485319606114272974855309"),
            BigInteger.Parse("72611151875544935726922785993733658275952242964370927603698450714073118171333308748002846415724487901210534892445863329465453580467656982261311966808977647"),
            BigInteger.Parse("77583495390141504200708058171231978113678526012743570420367895964379943016297522237994449345254330909745536340835579085992480259606648675135478106861185357"),
            BigInteger.Parse("88147762612042256671604233479501480092333988219657483433514303135357227298722568834083539762505044392475392658982562091637242122127413447362979155261595339"),
            BigInteger.Parse("90696019230813590181653995289883028696772842170092210530683264028650504614933826509831015199537169842766444983493170078147913978752477321791696241461153507"),
        };

        public (BigInteger, BigInteger, BigInteger) GenerateEDN()
        {
            Random random = new();

            var prc = primes.Count;
            var pi = random.Next(prc);
            var qi = (pi + random.Next(1, prc - 1)) % prc;

            var p = primes[pi];
            var q = primes[qi];

            var n = p * q;
            var m = (p - 1) * (q - 1);
            var e = PrimeTo(m);
            var d = Reverse(e, m);

            return (e, d, n);
        }

        private static BigInteger PrimeTo(BigInteger fi)
        {
            var result = 31;
            while (fi % result == 0) result++;
            return result;
        }

        private static BigInteger Reverse(BigInteger to, BigInteger mod)
        {
            // mod > to, so Item3 will always be negative
            return ee(mod, to).Item3 + mod;
        }

        private static (BigInteger, BigInteger, BigInteger) ee(BigInteger a, BigInteger b)
        {
            if (b == 0) return (a, 1, 0);
            var e = ee(b, a % b);
            var t = e.Item2 - (a / b) * e.Item3;
            return (e.Item1, e.Item3, t);
        }
    }
}
